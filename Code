
public class Customer{
    private final String name;
    private final String lastName;
    private Account account;

    public Customer(String name, String lastName) {
        this.name = name;
        this.lastName = lastName;
    }

    /**
     * Opens account for a customer (creates Account and sets it to field "account").
     * Customer can't have greater than one opened account.
     *
     * @param accountId id of the account
     * @return true if account hasn't already created, otherwise returns false and prints "Customer fullName() already has the active account"
     */
    public boolean openAccount(long accountId) {
        if (account.equals(accountId)) { 
            System.out.println("Customer "+fullName()+" already has the active account"); 
            return false;
        } else {
            return true;
        }
    }

    /**
     * Closes account. Sets account to null.
     *
     * @return false if account is already null and prints "Customer fullName() has no active account to close", otherwise sets account to null and returns true
     */
    public boolean closeAccount() {
        if (account == null) { 
            System.out.println("Customer "+fullName()+" has no active account to close");
            return false;             
        } else {
            account = null;
            return true;
        }
    }

    /**
     * Formatted full name of the customer
     * @return concatenated form of name and lastName, e.g. "John Goodman"
     */
    public String fullName() {
        //Или луше прописать это в отдельной строке?
        return name+lastName;
    }

    /**
     * Delegates withdraw to Account class
     * @param amount amount of money to withdraw
     * @return false if account is null and prints "Customer fullName() has no active account", otherwise returns the result of Account's withdraw method
     */
    public boolean withdrawFromCurrentAccount(double amount) {
        if (account == null) {
            System.out.println("Customer "+fullName()+" has no active account");
            return false;
        } else {
            return Account.withdraw(amount);
        }
    }

    /**
     * Delegates adding money to Account class
     * @param amount amount of money to add
     * @return false if account is null and prints "Customer fullName() has no active account", otherwise returns the result of Account's add method
     */
    public boolean addMoneyToCurrentAccount(double amount) {
        // write your code here
        if (account == null) {
            System.out.println("Customer "+fullName()+" has no active account");
            return false;
        } else {
            return Account.add(amount);
        }
    }
}

public class Account {
    private final long id;
    private double balance;

    public Account(long id) {
        this.id = id;
    }

    /**
     * Withdraws money from account balance
     *
     * @param amount amount of money to withdraw
     * @return true
     * if amount &gt 0 and (balance - amount) &ge 0,
     * otherwise returns false
     */
    public boolean withdraw(double amount) {
        if (amount > 0 & (balance - amount) >= 0){ //предполагаю, что баланс может стать нулевым.
            balance = balance - amount;
            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Adds money to account balance
     *
     * @param amount amount of money to add on account
     * @return true if amount &gt 0, otherwise returns false
     */
    public boolean add(double amount) {
        if (amount > 0) {
            balance = balance + amount;
            return true;
        } else {
            return false;
        }
    }
}
