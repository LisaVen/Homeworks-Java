/*Реализовать классы Customer и Account, имитирующие действия клиента со счетом в банке. Для первого задания условимся, что клиент может иметь только один открытый счет в банке.
Класс Account должен реализовывать следующий функционал:
1)      Снятие денег со счета (withdraw)
2)      Добавление денег на счет (add)
Класс Customer должен реализовывать следующий функционал:
1)      Открытие счета (openAccount). Клиент не может открыть новый счет пока не закроет старый.
2)      Закрытие счета (closeAccount). Переводит поле account у Customer в null.
3)   Полное имя клиента (fullName).
4)   Добавление денег на текущий счет (addMoneyToCurrentAccount)
5)   Снятие денег с текущего счета (withdrawFromCurrentAccount)
Важно, что все действия со счетом должны производиться исключительно через api клиента. Полное описание контрактов методов приводится в javadoc. 
На каждый класс необходимо написать Unit-тесты, тестирующие различные сценарии, указанные в контракте методов.*/


public class Customer {
    private final String name;
    private final String lastName;
    private Account account;

    public Customer(String name, String lastName) {
        this.name = name;
        this.lastName = lastName;
    }

    /**
     * Opens account for a customer (creates Account and sets it to field "account").
     * Customer can't have greater than one opened account.
     *
     * @param accountId id of the account
     * @return true if account hasn't already created, otherwise returns false and prints "Customer fullName() already has the active account"
     */
    public boolean openAccount(long accountId) {
        // write your code here
    }

    /**
     * Closes account. Sets account to null.
     *
     * @return false if account is already null and prints "Customer fullName() has no active account to close", otherwise sets account to null and returns true
     */
    public boolean closeAccount() {
        // write your code here
    }

    /**
     * Formatted full name of the customer
     * @return concatenated form of name and lastName, e.g. "John Goodman"
     */
    public String fullName() {
        // write your code here
    }

    /**
     * Delegates withdraw to Account class
     * @param amount
     * @return false if account is null and prints "Customer fullName() has no active account", otherwise returns the result of Account's withdraw method
     */
    public boolean withdrawFromCurrentAccount(double amount) {
        // write your code here
    }

    /**
     * Delegates adding money to Account class
     * @param amount
     * @return false if account is null and prints "Customer fullName() has no active account", otherwise returns the result of Account's add method
     */
    public boolean addMoneyToCurrentAccount(double amount) {
        // write your code here
    }
}

public class Account {
    private final long id;
    private double balance;

    public Account(long id) {
        this.id = id;
    }

    /**
     * Withdraws money from account balance
     *
     * @param amount amount of money to withdraw
     * @return true
     * if amount &gt 0 and (balance - amount) &gt 0,
     * otherwise returns false
     */
    public boolean withdraw(double amount) {
        // write your code here
    }

    /**
     * Adds money to account balance
     *
     * @param amount amount of money to add on account
     * @return true if amount &gt 0, otherwise returns false
     */
    public boolean add(double amount) {
        // write your code here
    }
}


